/*
题目描述：
给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的数字可以无限制重复被选取。

说明：
所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 

示例 1:
输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]

示例 2:
输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
*/

/*
思路：dfs即可。对candidates数组排序后可以剪枝
*/

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new LinkedList<>();
        dfs(candidates, target, res, new LinkedList<Integer>(), 0);
        return res;
    }

    public void dfs(int[] candidates, int target, List<List<Integer>> res, List<Integer> buf, int index){
        if(target == 0){
            res.add(new LinkedList<Integer>(buf));
            return;
        }
        for(int i = index; i < candidates.length; i++){
            int num = candidates[i];
            if(num > target){
                return;
            }
            buf.add(num);
            target -= num;
            dfs(candidates, target, res, buf, i);
            target += num;
            buf.remove(buf.size() - 1);
        }
    }
}
