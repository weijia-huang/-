/*
题目描述：
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。
如果数组中不存在目标值，返回 [-1, -1]。

示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]
*/

/*
思路：二分查找即可
这里给出两种代码，第一个好理解一些，第二个简洁一些
*/

//第一个
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return new int[]{-1, -1};
        }
        int start = binarySearch(nums, target, 0, nums.length - 1, 1);
        if(start == -1){
            return new int[]{-1, -1};
        }
        int end = binarySearch(nums, target, start, nums.length - 1, 2);
        return new int[]{start, end};
    }

    //mode == 1:寻找target的开始
    //mode == 2:寻找target的结束
    public int binarySearch(int[] nums, int target, int l, int r, int mode){
        while(l <= r){
            int mid = (l + r) >> 1;
            if(nums[mid] == target){
                if(mode == 1){
                    if(mid == 0 || nums[mid - 1] != target){
                        return mid;
                    }else{
                        r = mid - 1;
                    }
                }else{
                    if(mid == nums.length - 1 || nums[mid + 1] != target){
                        return mid;
                    }else{
                        l = mid + 1;
                    }
                }
            }else if(nums[mid] > target){
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        return -1;
    }
}

//第二个
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start = binarySearch(nums, target, 0, nums.length, 1);
        if(start == nums.length || nums[start] != target){
            return new int[]{-1, -1};
        }
        int end = binarySearch(nums, target, start, nums.length, 2) - 1;
        return new int[]{start, end};
    }

    //mode == 1:寻找target的开始
    //mode == 2:寻找target的结束
    public int binarySearch(int[] nums, int target, int l, int r, int mode){
        while(l < r){
            int mid = (l + r) >> 1;
            if(nums[mid] > target || (mode == 1 && nums[mid] == target)){
                r = mid;
            }else{
                l = mid + 1;
            }
        }
        return l;
    }
}
