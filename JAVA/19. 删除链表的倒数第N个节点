/*
给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：
给定一个链表: 1->2->3->4->5, 和 n = 2.
当删除了倒数第二个节点后，链表变为 1->2->3->5.

说明：
给定的 n 保证是有效的。

进阶：
你能尝试使用一趟扫描实现吗？
*/

/*
思路：利用双指针法，p2指针先走n步，然后两个指针同时走，p2指针到达结尾时，p1指针的下一个节点即为待删除节点。
注意点：需要考虑删除头节点的情况。这里是用if判断了删除节点是否为头节点。
也可以借助哑节点，则无需特别考虑头节点。
时间复杂度:O(L)
空间复杂度:O(1)
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode p1 = head;
        ListNode p2 = head;
        for(int i = 0; i < n; i++){
            p2 = p2.next;
        }
        if(p2 == null){
            return head.next;
        }
        while(p2.next != null){
            p1 = p1.next;
            p2 = p2.next;
        }
        p1.next = p1.next.next;
        return head;
    }
}
