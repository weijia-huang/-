/*
题目描述：
假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。

示例 1:
输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4

示例 2:
输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1
*/

//本题有三种解法
/*解法一
思路：先找到旋转点，再比较目标值和nums[0]来决定是对左段还是右段进行二分查找
*/
class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int l = 0, r = nums.length -1;
        //找到分界点，l是左边最大的，r是右边最小的
        while(r - l > 1){
            int mid = (l + r) >> 1;
            if(nums[mid] > nums[l]){
                l = mid;
            }else{
                r = mid;
            }
        }
        //考虑未旋转的特殊情况
        if(nums[l] < nums[r]){
            l = nums.length - 1;
        }
        return target >= nums[0] ? binarySearch(nums, 0, l, target) : 
            binarySearch(nums, r, nums.length - 1, target);
    }

    public int binarySearch(int[] nums, int start, int end, int target){
        if(start > end){
            return -1;
        }
        int mid = (start + end) >> 1;
        if(nums[mid] == target){
            return mid;
        }
        if(nums[mid] > target){
            return binarySearch(nums, start, mid - 1, target);
        }else{
            return binarySearch(nums, mid + 1, end, target);
        }
    }
}

/*解法二
思路：直接进行二分查找。先判断两段哪个有序,若target在有序段里，则对有序段进行二分查找，否则对另一段进行二分查找。
1.左段有序：若nums[l] < target < nums[mid]，则对左段进行二分查找，否则对右段进行二分查找。
2.右段有序：若nums[r] > target > nums[mid + 1],则对右段进行二分查找，否则对左段进行二分查找.
*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int l = 0, r = nums.length - 1;
        while(l <= r){
            int mid = (l + r) >> 1;
            if(nums[mid] == target){
                return mid;
            }
            if(nums[l] <= nums[mid]){
                if(target >= nums[l] && target < nums[mid]){
                    r = mid - 1;
                }else{
                    l = mid + 1;
                }
            }else{
                if(target > nums[mid] && target <= nums[r]){
                    l = mid + 1;
                }else{
                    r = mid - 1;
                }
            }
        }
        return -1;
    }
}

/*解法三
思路：直接进行二分查找。以[4,5,6,7,0,1,2]为例，将target与nums[0]进行比较:
1.target >= nums[0]，则对【4, 5, 6, 7, INF, INF】进行二分查找
2.target < nums[0],则对【-INF,-INF, 0, 1, 2】进行二分查找
从而将数组转化为对有序数组的二分查找
*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int l = 0, r = nums.length - 1;
        while(l <= r){
            int mid = (l + r) >> 1;
            if(nums[mid] == target){
                return mid;
            }
            if(target >= nums[0]){
                if(nums[mid] < nums[0]){
                    nums[mid] = Integer.MAX_VALUE;
                }
            }else{
                if(nums[mid] > nums[r]){
                    nums[mid] = Integer.MIN_VALUE;
                }
            }
            if(target > nums[mid]){
                l = mid + 1;
            }else{
                r = mid - 1;
            }
        }
        return -1;
    }
}
