/*
题目描述
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。

示例 1:
输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。

示例 2:
输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
*/

/*两种解法
解法一：
思路：动态规划，f(i)表示从i出发是否可以到达最后一个位置，f(k) = f(k+1) || f(k+2) || … || f(k + nums[k])。边界值f(n) = true。
时间复杂度:O(n^2)
空间复杂度:O(n)

解法二：
思路: 贪心，尽可能到达最远位置。f(i)表示从[0,i]上某一位置出发可到达的最远位置。f(i + 1) = max( f(i), f(i+1) + nums[i])。
注意: i < f(i - 1)
时间复杂度:O(n)
空间复杂度：O(1)
*/

//解法一
class Solution {
    public boolean canJump(int[] nums) {
        boolean[] canJump = new boolean[nums.length];
        canJump[canJump.length - 1] = true;
        for(int i = canJump.length - 2; i >= 0; i--){
            int maxDis = i + nums[i], j = i + 1;
            if(maxDis >= canJump.length - 1) canJump[i] = true;
            while(!canJump[i] && j <= maxDis) canJump[i] = canJump[j++];
        }
        return canJump[0];
    }
}

//解法二
class Solution {
    public boolean canJump(int[] nums) {
        int maxDis = nums[0];
        for(int i = 1; i <= maxDis && maxDis < nums.length - 1; i++){
            maxDis = Math.max(maxDis, i + nums[i]);
        }
        return maxDis >= nums.length - 1;
    }
}
