/*
题目描述：
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

示例 1：
输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。

示例 2：
输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。

示例 3：
输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。

进阶：
你是否可以不用额外空间解决此题？
*/

/*
思路：快慢指针，快指针先走一步，然后慢指针每走一步，快指针走两步，统计慢指针走的步数n
若无环，则返回null
若有环，则指针相遇时，n + 1是环的长度的整数倍。故快慢指针重新从head出发，快指针先走n + 1步，相遇节点为入口节点
时间复杂度：O(n)

思考：是否可以优化阶段二
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null) return null;
        ListNode low = head;
        ListNode fast = head.next;
        int n = 0;
        while(low != fast){
            if(fast == null || fast.next == null) return null;
            low = low.next;
            fast = fast.next;
            fast = fast.next;
            n++;
        }
        low = head;
        fast = head.next;
        while(n > 0){
            fast = fast.next;
            n--;
        }
        while(low != fast){
            low = low.next;
            fast = fast.next;
        }
        return low;
    }
}
