/*
题目描述：
给定一个二叉树，返回它的中序 遍历。

示例:
输入: [1,null,2,3]
   1
    \
     2
    /
   3
输出: [1,3,2]

进阶: 递归算法很简单，你可以通过迭代算法完成吗？
*/

//递归算法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> res = new ArrayList();
    public List<Integer> inorderTraversal(TreeNode root) {
        infixSearch(root);
        return res;
    }

    public void infixSearch(TreeNode root){
        if(root != null){
            infixSearch(root.left);
            res.add(root.val);
            infixSearch(root.right);
        } 
    }
}

//迭代算法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList();
        Stack<TreeNode> stack = new Stack();
        if(root != null) stack.push(root);
        TreeNode p = root;
        while(!stack.isEmpty()){
            if(p == null || p.left == null){
                p = stack.pop();
                if(p != null){
                    res.add(p.val);
                    p = p.right;
                    stack.push(p);
                }
            }else{
                p = p.left;
                stack.push(p);
            }
        }
        return res;
    }
}
