/*
给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。

示例：
给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

/*
解法一：
思路：利用两数之和的思路。双层循环遍历，带着两个数查询满足等式的第三个数是否在数组里。
注意点：因为结果不能重复，所以可先进行排序，双层循环遍历时跳过重复数字。
时间复杂度:O(n^2)
空间复杂度:O(n)
*/

/*
解法二：排序+双指针
思路：利用有序性，确定最左边的数后，可通过双指针的移动实现在一次遍历内找到剩下两个数
时间复杂度:O(n^2)  |这里的时间复杂度比解法一略低
空间复杂度:O(1)
*/

//解法一
import java.util.*;
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i],i);
        }
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i - 1]){
                continue;
            }
            for(int j = i + 1; j < nums.length; j++){
                if(j > i + 1 && nums[j] == nums[j - 1]){
                    continue;
                }
                int tgt = nums[i] + nums[j];
                int k = -1;
                if(map.containsKey(-tgt) && (k = map.get(-tgt)) > j){
                    res.add(Arrays.asList(nums[i],nums[j],nums[k]));
                } 
            }
        }
        return res;
    }
}


//解法二
import java.util.*;
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i - 1]){
                continue;
            }
            int j = i + 1, k = nums.length - 1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0){
                    res.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    while(j < k && nums[j] == nums[j+1]){
                        j++;
                    }
                    j++;
                    while(j < k && nums[k-1] == nums[k]){
                        k--;
                    }
                    k--;
                }else if (sum > 0){
                    k--;
                }else{
                    j++;
                }
            }
        }
        return res;
    }
}
