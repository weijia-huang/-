/*
给定一个二维网格和一个单词，找出该单词是否存在于网格中。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false
 
提示：
board 和 word 中只包含大写和小写英文字母。
1 <= board.length <= 200
1 <= board[i].length <= 200
1 <= word.length <= 10^3
*/

/*
思路：dfs即可
*/

class Solution {
    public boolean exist(char[][] board, String word) {
        if(board == null || word == null) return false;
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == word.charAt(0)){
                    if(dfs(board, word, i, j, 0, visited)){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, String word, int x, int y, int index, boolean[][] visited){
        if(board[x][y] == word.charAt(index)){
            if(index == word.length() - 1) return true;
            visited[x][y] = true;
            //左边
            if(x > 0 && !visited[x - 1][y] && dfs(board, word, x - 1, y, index + 1, visited)) return true;
            //右边
            if(x < board.length - 1 && !visited[x + 1][y] && dfs(board, word, x + 1, y, index + 1, visited)) return true;
            //上边
            if(y > 0 && !visited[x][y - 1] && dfs(board, word, x, y - 1, index + 1, visited)) return true;
            //下边
            if(y < board[0].length - 1 && !visited[x][y + 1] && dfs(board, word, x, y + 1, index + 1, visited)) return true;
            visited[x][y] = false;
        }
        return false;
    }
}
