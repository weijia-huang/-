/*
题目描述：
根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出
前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

*/

/*
思路：利用下面的性质,可以递归返回左右子树的根节点
inorder = [[左子树的中序遍历], root, [右子树的中序遍历]]
preorder = [root, [左子树的前序遍历], [右子树的前序遍历]]
时间复杂度：O(n)
空间复杂度：O(n)
注意：因为树中没有重复元素，所以可以利用哈希映射提高inorder中定位root的速度
后续考虑迭代的写法
*/

//递归写法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int[] preorder;
    int[] inorder;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder = preorder;
        this.inorder = inorder;
        return getRoot(0, preorder.length - 1, 0, inorder.length - 1);
    }

    public TreeNode getRoot(int pStart, int pEnd, int iStart, int iEnd){
        if(iStart > iEnd) return null;
        TreeNode root = new TreeNode(preorder[pStart]);
        for(int i = iStart; i <= iEnd; i++){
            if(inorder[i] == preorder[pStart]){
                int leftLen = i - iStart;
                root.left = getRoot(pStart + 1, pStart + leftLen, iStart, i - 1);
                root.right = getRoot(pStart + leftLen + 1, pEnd, i + 1, iEnd);
            }
        }
        return root;
    }
}

//递归优化写法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int[] preorder;
    int[] inorder;
    Map<Integer, Integer> map = new HashMap();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder = preorder;
        this.inorder = inorder;
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i],i);
        }
        return getRoot(0, preorder.length - 1, 0, inorder.length - 1);
    }

    public TreeNode getRoot(int pStart, int pEnd, int iStart, int iEnd){
        if(iStart > iEnd) return null;
        TreeNode root = new TreeNode(preorder[pStart]);
        int i = map.get(preorder[pStart]);
        int leftLen = i - iStart;
        root.left = getRoot(pStart + 1, pStart + leftLen, iStart, i - 1);
        root.right = getRoot(pStart + leftLen + 1, pEnd, i + 1, iEnd);
        return root;
    }
}


