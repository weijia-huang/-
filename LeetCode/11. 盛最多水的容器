/*
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。
在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器，且 n 的值至少为 2。

示例：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
*/

/*
思路：双指针法，每次移动指向值较小的那个指针
证明：假设左右指针指向的值分别为x,y，且x < y， 指针间距l。则此时容量t(x,y) = x * l。
若只移动右指针，则l必然减小，t(x,y1) = x * l1 < t(x,y)
若只移动左指针，则t(x1, y) = max(x1, y) * l1，有可能比t(x,y)大。
时间复杂度:O(n)
空间复杂度:O(1)
*/

class Solution {
    public int maxArea(int[] height) {
        int max = 0, l = 0, r = height.length - 1;
        while(l < r){
            max = Math.max(max, (r - l) * Math.min(height[l],height[r]));
            if(height[l] < height[r]){
                l++;
            }else{
                r--;
            }
        }
        return max;
    }
}
