/*
题目描述：
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。
*/

/*
思路：动态规划:dp[m][n] = Math.min(dp[m - 1][n], dp[m][n - 1]) + grid[m][n];
时间复杂度:O(m * n)
空间复杂度:O(m * n) | 优化后O(n) ｜若可改变grid数组，O(1)
*/

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid[0].length;
        int[] dp = new int[n];
        dp[0] = grid[0][0];
        for(int i = 1; i < n; i++) dp[i] = dp[i - 1] + grid[0][i];
        for(int i = 1; i < grid.length; i++){
            dp[0] += grid[i][0];
            for(int j = 1; j < n; j++) 
                dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j];
        }
        return dp[n - 1];
    }
}
