/*
题目描述：
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。
给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例:
输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。
*/

/*
思路：DFS即可
*/

import java.util.*;
class Solution {
    public List<String> letterCombinations(String digits) {
        if(digits == null || digits.length() == 0){
            return new ArrayList<String>();
        }
        Map<Character, List<String>> map = new HashMap<Character, List<String>>(){{
            put('2',Arrays.asList("a","b","c"));
            put('3',Arrays.asList("d","e","f"));
            put('4',Arrays.asList("g","h","i"));
            put('5',Arrays.asList("j","k","l"));
            put('6',Arrays.asList("m","n","o"));
            put('7',Arrays.asList("p","q","r","s"));
            put('8',Arrays.asList("t","u","v"));
            put('9',Arrays.asList("w","x","y","z"));
        }};
        List<String> res = new ArrayList<>();
        dfs(res, map, digits, 0, "");
        return res;
    }
    public void dfs(List<String> res, Map<Character, List<String>> map, 
    String digits, int index, String curStr){
        if(index == digits.length()){
            res.add(curStr);
            return;
        }
        List<String> letters = map.get(digits.charAt(index));
        for(String letter: letters){
            dfs(res, map, digits, index + 1, curStr + letter);
        }
    }
}
