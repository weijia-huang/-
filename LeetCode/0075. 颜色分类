/*
给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:
输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]

进阶：
一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？
*/

/*
思路：计数排序
时间复杂度：O(n)
空间复杂度：O(1)
*/

/*进阶
思路：partion思想.对于一段数组来说，[0,l)里全是0，[l,i)里全是1，(r, n-1]里全是2.
初始时，三个集合全为空。
指针i进行遍历，若遇到0则和l指向的数字交换；若遇到2则和r指向的数字交换。
i>r的时候,数组刚好分为这三个集合，遍历完毕。
时间复杂度：O(n)
空间复杂度：O(1)
*/

class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int l = 0, r = n - 1, i = l;
        while(i <= r){
            if(nums[i] == 0){
                swap(nums, i, l);
                l++;
                i++;
            }else if(nums[i] == 1){
                i++;
            }else{
                swap(nums, i, r);
                r--;
            }
        }
    }

    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
