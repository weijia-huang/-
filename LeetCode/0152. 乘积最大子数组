/*
题目描述:
给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

示例 1:
输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。

示例 2:
输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
*/

/*
思路：动态规划.
x 为当前值，当前最值为以 x 为尾部的子数组的乘积的最值。
若 x<0, 则 x * 最小负值 为最大值
若 x>0, 则 x * 最大正值 为最大值
若 x=0, 则 0 为最大值
故 x 的最大值在 (min * x, max * x, x) 中诞生
时间复杂度:O(n)
空间复杂度:O(1)

提示：是否还有其他思路？
*/

class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int res = nums[0];
        int max = nums[0], min = nums[0];
        for(int i = 1; i < nums.length; i++){
            int x = nums[i];
            int maxBuf = Math.max(max * x, Math.max(min * x, x));
            min = Math.min(max * x, Math.min(min * x, x));
            max = maxBuf;
            if(max > res) res = max;
        }
        return res;
    }
}
