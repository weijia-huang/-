/*
题目描述：
给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。

示例：
二叉树：[3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：
[
  [3],
  [9,20],
  [15,7]
]
*/

/*
思路：用队列存储遍历节点，cur记录当前层剩余未遍历的节点数，next记录下一层节点数
时间复杂度:O(n)
空间复杂度:O(n)
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        Queue<TreeNode> q = new LinkedList();
        if(root != null) q.offer(root);
        int cur = 1;//记录当前层还剩几个节点未遍历
        int next = 0;//记录下一层总共有多少个节点
        List<Integer> list = new ArrayList();
        while(!q.isEmpty()){
            TreeNode p = q.poll();
            cur--;
            list.add(p.val);
            if(p.left != null){
                q.offer(p.left);
                next++;
            }
            if(p.right != null){
                q.offer(p.right);
                next++;
            }
            if(cur == 0){
                res.add(list);
                list = new ArrayList();
                cur = next;
                next = 0;
            }
        }
        return res;
    }
}

//精简代码
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        Queue<TreeNode> q = new LinkedList();
        if(root != null) q.offer(root);
        int cur = 1;//记录当前层还剩几个节点未遍历
        List<Integer> list = new ArrayList();
        while(!q.isEmpty()){
            TreeNode p = q.poll();
            if(p != null){
                list.add(p.val);
                q.offer(p.left);
                q.offer(p.right);
            }
            if(--cur == 0 && !list.isEmpty()){
                res.add(list);
                list = new ArrayList();
                cur = q.size();
            }
        }
        return res;
    }
}
