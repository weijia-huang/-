/*
题目描述：
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

进阶:
如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。
*/

/*
思路：动态规划，f(n)为尾部下标为n的连续子数组的最大和。f(n) = max( f(n - 1) + nums[n], nums[n] ).
时间复杂度:O(n)
空间复杂度:O(1)

进阶思路：利用线段树
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int buf = nums[0];
        for(int i = 1; i < nums.length; i++){
            buf = Math.max(buf + nums[i], nums[i]);
            max = Math.max(buf, max);
        }
        return max;
    }
}
